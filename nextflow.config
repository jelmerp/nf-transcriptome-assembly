manifest {
    description = 'Transcriptome assembly pipeline implemented with Nextflow' 
    author = 'Jelmer Poelstra'
}

//includeConfig conf/base.config

// Param defaults
params {
    outdir = "results/nf_tram"
    subset_fastq = false
    trim_nextseq = false
    ref_fasta = false
    nfiles_rcorr = 20
    krakendb = "/fs/project/PAS0471/jelmer/refdata/kraken/std-plus-fungi"
    min_contig_length = 300
    strandedness = "reverse"
    //k_vals_abyss = [21, 23, 25, 27, 29, 31, 33, 35, 45, 55, 65, 75]
    k_vals_abyss = [21, 23, 25]
    k_vals_spades = [55, 75, "auto"]
    busco_db = "TODO"
    tracedir = "$params.outdir/trace"
    help = false
}

process {
    errorStrategy = {task.attempt <= 2 ? 'retry' : 'ignore'}
    //maxRetries = 3

    withLabel: 'local_process' {
        cpus = 1
        memory = '4 GB'
    }
    withName: 'FASTQC' {
        conda = "/fs/ess/PAS0471/jelmer/conda/fastqc-0.11.9"
    }
    withName: 'MULTIQC_RAW|MULTIQC_TRIM|MULTIQC_PRE' {
        conda = "/fs/ess/PAS0471/jelmer/conda/multiqc"
    }
    withName: 'TRIMGALORE' {
        conda = "/fs/project/PAS0471/jelmer/conda/trimgalore-0.6.7"
    }
    withName: 'RCORRECTOR' {
        conda = "/fs/ess/PAS0471/jelmer/conda/rcorrector-1.0.5"
    }
    withName: 'RCORRFILTER' {
        conda = "/fs/ess/PAS0471/jelmer/conda/rcorrector-1.0.5"
    }
    withName: 'SORTMERNA' {
        conda = "/fs/ess/PAS0471/jelmer/conda/sortmerna-env"
    }
    withName: 'KRAKEN' {
        conda = "/users/PAS0471/jelmer/miniconda3/envs/kraken2-env"
    }
    withName: 'KRONA' {
        conda = "/users/PAS0471/jelmer/miniconda3/envs/krona-env"
    }
    withName: 'ORNA' {
        conda = "/fs/ess/PAS0471/jelmer/conda/orna-2.0"
    }
    withName: 'TRINITY|TRINITY_GUIDED' {
        conda = "/fs/ess/PAS0471/jelmer/conda/trinity-2.13.2"
    }
    withName: 'TRANSABYSS_NORM|TRANSABYSS_NONORM' {
        conda = "/fs/project/PAS0471/jelmer/conda/transabyss-2.0.1"
    }
    withName: 'TRANSABYSS_NORM|TRANSABYSS_NONORM' {
        conda = "/fs/project/PAS0471/jelmer/conda/spades-3.15.5"
    }
    withName: 'INDEX_GENOME|MAP2GENOME' {
        conda = "/fs/ess/PAS0471/jelmer/conda/star-2.7.10a"
    }
}

// Profiles
profiles {
    local {
        process.executor = 'local'
    }

    test {
        process {
            errorStrategy = 'terminate'
            maxRetries = 0
            cpus = 8
            memory = '32 GB'
            time = '2.hour'
            withName: 'KRAKEN' {
                memory = '100 GB'
                cpus = 25
            }
        }
    }
    
    normal {
        process {
            cpus = 10
            memory = '40 GB'
            time = '5.hour'
            withName: 'RCORRECTOR' {
                time = "72.hour"
                cpus = 20
                memory = '80 GB'
            }
            withName: 'RCORRFILTER' {
                time = "12.hour"
            }
            withName: 'KRAKEN' {
                memory = '100 GB'
                cpus = 25
            }
            withName: 'TRINITY|TRINITY_GUIDED' {
                memory = '170 GB'
                cpus = 42
                time = '72.hour'
            }
            withName: 'TRANSABYSS_NONORM|TRANSABYSS_NORM' {
                memory = '60 GB'
                cpus = 15
                time = '24.hour'
            }
            withName: 'SPADES' {
                memory = '80 GB'
                cpus = 20
                time = '36.hour'
            }
            withName: 'INDEX_GENOME' {
                memory = '1300 GB'
                cpus = 42
                queue = 'hugemem'
            }
            withName: 'MAP2GENOME' {
                memory = '100 GB'
                cpus = 16
            }
        }
    }
}

// Enable reports and have better filenames
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
