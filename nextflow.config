manifest {
    description = 'Transcriptome assembly pipeline implemented with Nextflow' 
    author = 'Jelmer Poelstra'
}

//includeConfig conf/base.config

// Param defaults
params {
    outdir = "results/nf_tram"
    
    strandedness = "reverse"
    
    subset_fq = false
    genome_fasta = false
    genome_index = false
    genome_bam = false
    
    trim_nextseq = false
    trim_qual = 30
    trim_len = 50

    nfiles_rcorr = 20
    kraken_db_url = "https://genome-idx.s3.amazonaws.com/kraken/k2_standard_20220926.tar.gz"
    kraken_db_dir = false
    
    nfiles_assembly = 10
    norms = "false,true"
    k_abyss = "32,64,96"     // Follows https://github.com/bcgsc/transabyss/issues/24
    k_spades = "55,75,auto"
    min_contig_length = 300
    busco_db = false
    
    entap_config_init = "${projectDir}/conf/entap_config.ini"
    entap_config_final = false
    entap_diamond_dir = false
    entap_db_dir = false
    entap_expr_filt = true
    
    entap_custom_db = false
    entap_refseq_type = "complete"
    entap_refseq_db = false
    entap_nr_db = false
    entap_swissprot_db = false

    entap_use_refseq = true
    entap_use_nr = true
    entap_use_tair = true
    
    entap_taxon = false
    entap_contam = false
    entap_qcov = 80
    entap_tcov = 60
    entap_eval = "1e-05"
    entap_fpkm = "0.5"

    skip_qc_reads = false
    skip_process_reads = false
    skip_assembly = false
    skip_qc_assembly = false
    skip_annotate = false
    skip_quantify = false
    skip_entap_config = false
    skip_get_protein_dbs = false

    skip_assembly_norm = false
    skip_assembly_nonorm = false
    skip_trinity = false
    skip_spades = false
    skip_abyss = false

    reads_processed = false
    reads_norm = false
    assembly_1trans = false
    assembly_alltrans = false
    assembly_final = false
    tx2gene = false

    tracedir = "$params.outdir/trace"
    help = false
}

process {
    errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
    maxRetries = 1
    clusterOptions='--account=PAS0471 --mail-type=END,FAIL'

    withLabel: 'local_process' {
        cpus = 1
        memory = '4 GB'
    }
    withName: 'FASTQC' {
        conda = "/fs/ess/PAS0471/jelmer/conda/fastqc-0.11.9"
    }
    withName: 'MULTIQC' {
        conda = "/fs/ess/PAS0471/jelmer/conda/multiqc"
    }
    withName: 'TRIMGALORE' {
        conda = "/fs/project/PAS0471/jelmer/conda/trimgalore-0.6.7"
    }
    withName: 'RCORRECTOR' {
        conda = "/fs/ess/PAS0471/jelmer/conda/rcorrector-1.0.5"
    }
    withName: 'RCORRFILTER' {
        conda = "/fs/ess/PAS0471/jelmer/conda/rcorrector-1.0.5"
    }
    withName: 'SORTMERNA' {
        conda = "/fs/ess/PAS0471/jelmer/conda/sortmerna-env"
    }
    withName: 'KRAKEN' {
        conda = "/fs/ess/PAS0471/jelmer/conda/kraken2-2.1.2"
    }
    withName: 'KRONA' {
        conda = "/fs/ess/PAS0471/jelmer/conda/krona"
    }
    withName: 'ORNA_ALL|ORNA_PAIR' {
        conda = "/fs/ess/PAS0471/jelmer/conda/orna-2.0"
    }
    withName: 'TRINITY|TRINITY_GUIDED' {
        conda = "/fs/ess/PAS0471/jelmer/conda/trinity-2.13.2"
    }
    withName: 'TRANSABYSS' {
        conda = "/fs/project/PAS0471/jelmer/conda/transabyss-2.0.1"
    }
    withName: 'SPADES' {
        conda = "/fs/project/PAS0471/jelmer/conda/spades-3.15.5"
    }
    withName: 'INDEX_GENOME|MAP2GENOME' {
        conda = "/fs/ess/PAS0471/jelmer/conda/star-2.7.10a"
    }
    withName: 'TXIMPORT' {
        conda = "/fs/ess/PAS0471/jelmer/conda/r-deseq"
    }
    withName: 'KALLISTO_INDEX|KALLISTO_QUANT' {
        conda = "/fs/ess/PAS0471/jelmer/conda/kallisto-0.48.0"
    }
}

// Profiles
profiles {
    local {
        process.executor = 'local'
    }

    normal {
        process {
            cpus = { 12 * task.attempt }
            memory = { 48.GB * task.attempt }
            time = { 10.hour * task.attempt }

            withName: 'RCORRECTOR|ORNA_ALL' {
                memory = 120.GB
                cpus = 30
                time = 100.hour
            }
            withName: 'KRAKEN' {
                memory = 100.GB
                cpus = 25
                time = { 2.hour * task.attempt }
            }
            withName: 'SPADES|TRANSABYSS|TRINITY|MERGE_BAM' {
                memory = 170.GB
                cpus = 10
                time = { 96.hour * task.attempt }
            }
            withName: 'TRINITY_GUIDED|TRINITY_NORM|SPADES_NORM|TRANSABYSS_NORM' {
                queue = 'largemem'
                memory = 740.GB
                cpus = 30           //15.5 GB/CPU
                time = 96.hour
            }
            withName: 'INDEX_GENOME' {
                queue = 'hugemem'
                memory = 1300.GB
                cpus = 30
                time = { 3.hour * task.attempt }
            }
            withName: 'MAP2GENOME' {
                queue = 'hugemem'
                memory = 750.GB
                cpus = 30
                time = 48.hour
            }
            withName: 'EVIGENE' {
                memory = 20.GB
                cpus = 5
                time = 72.hour
            }
        }
    }

    test {
        process {
            maxRetries = 0
            time = { 6.hour * task.attempt }
            memory = { 32.GB * task.attempt }
            cpus = { 8 * task.attempt }

            withName: 'TRINITY|TRINITY_GUIDED' {
                time = { 12.hour * task.attempt }
                memory = { 64.GB * task.attempt }
                cpus = { 16 * task.attempt }
            }
            withName: 'KRAKEN' {
                memory = 100.GB
                cpus = 25
            }
            withName: 'ENTAP' {
                cpus = 12
                time = 18.hour
            }
        }
    }

}

// Enable reports and have better filenames
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
